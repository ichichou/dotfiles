title: "10-2. ぶな配列 v2.0"

# ALIASES ========================================

aliases:

# Modifier Keys ----------------------------------

- from/modifiers: &optional_shift
    optional:
    - shift

- from/modifiers: &mandatory_shift
    mandatory:
    - shift

- to/modifiers: &to_shift
  - shift

- parameters: &delay_ms_to_cancel_shifted
    basic.to_delayed_action_delay_milliseconds: 5000

# Conditions -------------------------------------

- conditions: &base
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol
    value: true
  - type: variable_unless
    name: left_shift
    value: true
  - type: variable_unless
    name: right_shift
    value: true
  - type: frontmost_application_unless
    bundle_identifiers:
    - "com.apple.loginwindow"

- conditions: &left_shift
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol
    value: true
  - type: variable_if
    name: left_shift
    value: true
  - type: frontmost_application_unless
    bundle_identifiers:
    - "com.apple.loginwindow"

- conditions: &right_shift
  - type: input_source_if
    input_sources:
    - language: ja
  - type: variable_unless
    name: symbol
    value: true
  - type: variable_if
    name: right_shift
    value: true
  - type: frontmost_application_unless
    bundle_identifiers:
    - "com.apple.loginwindow"

- conditions: &symbol
  - type: variable_if
    name: symbol
    value: true
  - type: frontmost_application_unless
    bundle_identifiers:
    - "com.apple.loginwindow"

# RULES ==========================================

rules:
- description: "10-2. ぶな配列 v2.0"
  manipulators:

# 中指シフト・左 --------------------------

  # q -> づ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift
    to:
    - key_code: d
    - key_code: u
      repeat: false
    conditions: *left_shift

  # w (未定義)
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift
    to:
    - set_variable:
        name: left_shift
        value: false
    conditions: *left_shift

  # e -> ぢ
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift
    to:
    - key_code: d
    - key_code: i
      repeat: false
    conditions: *left_shift

  # # r -> ぷ
  # # Symbol Mode で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift
  #   to:
  #   - key_code: p
  #   - key_code: u
  #     repeat: false
  #   conditions: *left_shift

  # t -> ぅ
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: u
      repeat: false
    conditions: *left_shift

  # y -> ぬ
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: u
      repeat: false
    conditions: *left_shift

  # u -> ぱ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift
    to:
    - key_code: p
    - key_code: a
      repeat: false
    conditions: *left_shift

  # i -> げ
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift
    to:
    - key_code: g
    - key_code: e
      repeat: false
    conditions: *left_shift

  # o -> じ
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift
    to:
    - key_code: z
    - key_code: i
      repeat: false
    conditions: *left_shift

  # p -> ゃ
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: "y"
    - key_code: a
      repeat: false
    conditions: *left_shift

  # a -> ば
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift
    to:
    - key_code: b
    - key_code: a
      repeat: false
    conditions: *left_shift

  # s -> さ
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift
    to:
    - key_code: s
    - key_code: a
      repeat: false
    conditions: *left_shift

  # d -> 。
  - type: basic
    from:
      key_code: d
      modifiers: *optional_shift
    to:
    - key_code: period
      repeat: false
    conditions: *left_shift

  # f -> ゅ
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: "y"
    - key_code: u
      repeat: false
    conditions: *left_shift

  # g -> ぜ
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift
    to:
    - key_code: z
    - key_code: e
      repeat: false
    conditions: *left_shift

  # h -> ひ
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift
    to:
    - key_code: h
    - key_code: i
      repeat: false
    conditions: *left_shift

  # j -> を
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift
    to:
    - key_code: w
    - key_code: o
      repeat: false
    conditions: *left_shift

  # k -> め
  - type: basic
    from:
      key_code: k
      modifiers: *optional_shift
    to:
    - key_code: m
    - key_code: e
      repeat: false
    conditions: *left_shift

  # l -> ー
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift
    to:
    - key_code: quote
      repeat: false
    conditions: *left_shift

  # ; -> ぶ
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift
    to:
    - key_code: b
    - key_code: u
      repeat: false
    conditions: *left_shift

  # ' (未定義)
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift
    to:
    - set_variable:
        name: left_shift
        value: false
    conditions: *left_shift

  # z -> ぴ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift
    to:
    - key_code: p
    - key_code: i
      repeat: false
    conditions: *left_shift

  # x -> ぞ
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift
    to:
    - key_code: z
    - key_code: o
      repeat: false
    conditions: *left_shift

  # c (未定義)
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift
    to:
    - set_variable:
        name: left_shift
        value: false
    conditions: *left_shift

  # v -> ゆ
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift
    to:
    - key_code: "y"
    - key_code: u
      repeat: false
    conditions: *left_shift

  # b -> ヴ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift
    to:
    - key_code: v
    - key_code: u
      repeat: false
    conditions: *left_shift

  # n -> ず
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift
    to:
    - key_code: z
    - key_code: u
      repeat: false
    conditions: *left_shift

  # m -> む
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift
    to:
    - key_code: m
    - key_code: u
      repeat: false
    conditions: *left_shift

  # , -> ぎ
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift
    to:
    - key_code: g
    - key_code: i
      repeat: false
    conditions: *left_shift

  # . -> ぐ
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift
    to:
    - key_code: g
    - key_code: u
      repeat: false
    conditions: *left_shift

  # / -> ぽ
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift
    to:
    - key_code: p
    - key_code: o
      repeat: false
    conditions: *left_shift

  # Esc -> アンシフト
  - type: basic
    from:
      key_code: escape
      modifiers: *optional_shift
    to:
    - set_variable:
        name: left_shift
        value: false
    conditions: *left_shift

# 中指シフト・右 --------------------------

  # q -> べ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift
    to:
    - key_code: b
    - key_code: e
      repeat: false
    conditions: *right_shift

  # w -> ぼ
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift
    to:
    - key_code: b
    - key_code: o
      repeat: false
    conditions: *right_shift

  # e -> ほ
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift
    to:
    - key_code: h
    - key_code: o
      repeat: false
    conditions: *right_shift

  # # r -> そ
  # # Symbol mode keys で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift
  #   to:
  #   - key_code: s
  #   - key_code: o
  #     repeat: false
  #   conditions: *right_shift

  # t -> へ
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift
    to:
    - key_code: h
    - key_code: e
      repeat: false
    conditions: *right_shift

  # y (未定義)
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift
    to:
    - set_variable:
        name: right_shift
        value: false
    conditions: *right_shift

  # u -> ぺ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift
    to:
    - key_code: p
    - key_code: e
      repeat: false
    conditions: *right_shift

  # i -> ぇ
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: e
      repeat: false
    conditions: *right_shift

  # o -> え
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift
    to:
    - key_code: e
      repeat: false
    conditions: *right_shift

  # p -> や
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift
    to:
    - key_code: "y"
    - key_code: a
      repeat: false
    conditions: *right_shift

  # a -> わ
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift
    to:
    - key_code: w
    - key_code: a
      repeat: false
    conditions: *right_shift

  # s -> せ
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift
    to:
    - key_code: s
    - key_code: e
      repeat: false
    conditions: *right_shift

  # d -> け
  - type: basic
    from:
      key_code: d
      modifiers: *optional_shift
    to:
    - key_code: k
    - key_code: e
      repeat: false
    conditions: *right_shift

  # f -> ど
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift
    to:
    - key_code: d
    - key_code: o
      repeat: false
    conditions: *right_shift

  # g -> あ
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift
    to:
    - key_code: a
      repeat: false
    conditions: *right_shift

  # h -> び
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift
    to:
    - key_code: b
    - key_code: i
      repeat: false
    conditions: *right_shift

  # j -> つ
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift
    to:
    - key_code: t
    - key_code: u
      repeat: false
    conditions: *right_shift

  # k -> 、
  - type: basic
    from:
      key_code: k
      modifiers: *optional_shift
    to:
    - key_code: comma
      repeat: false
    conditions: *right_shift

  # l -> お
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift
    to:
    - key_code: o
      repeat: false
    conditions: *right_shift

  # ; -> ろ
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift
    to:
    - key_code: r
    - key_code: o
      repeat: false
    conditions: *right_shift

  # ' (未定義)
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift
    to:
    - set_variable:
        name: right_shift
        value: false
    conditions: *right_shift


  # z -> ふ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift
    to:
    - key_code: h
    - key_code: u
      repeat: false
    conditions: *right_shift

  # x -> ざ
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift
    to:
    - key_code: z
    - key_code: a
      repeat: false
    conditions: *right_shift

  # c -> ご
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift
    to:
    - key_code: g
    - key_code: o
      repeat: false
    conditions: *right_shift

  # v -> ね
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: e
      repeat: false
    conditions: *right_shift

  # b -> よ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift
    to:
    - key_code: "y"
    - key_code: o
      repeat: false
    conditions: *right_shift

  # n -> み
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift
    to:
    - key_code: m
    - key_code: i
      repeat: false
    conditions: *right_shift

  # m -> ち
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift
    to:
    - key_code: t
    - key_code: i
      repeat: false
    conditions: *right_shift

  # , -> ぉ
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: o
      repeat: false
    conditions: *right_shift

  # . -> ぃ
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: i
      repeat: false
    conditions: *right_shift

  # / -> ぁ
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: a
      repeat: false
    conditions: *right_shift

  # Esc -> アンシフト
  - type: basic
    from:
      key_code: escape
      modifiers: *optional_shift
    to:
    - set_variable:
        name: right_shift
        value: false
    conditions: *right_shift

# ベース --------------------------------------

  # q -> こ
  - type: basic
    from:
      key_code: q
      modifiers: *optional_shift
    to:
    - key_code: k
    - key_code: o
      repeat: false
    conditions: *base

  # w -> に
  - type: basic
    from:
      key_code: w
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: i
      repeat: false
    conditions: *base

  # e -> は
  - type: basic
    from:
      key_code: e
      modifiers: *optional_shift
    to:
    - key_code: h
    - key_code: a
      repeat: false
    conditions: *base

  # # r -> て
  # # Symbol mode keys で定義
  # - type: basic
  #   from:
  #     key_code: r
  #     modifiers: *optional_shift
  #   to:
  #   - key_code: t
  #   - key_code: e
  #     repeat: false
  #   conditions: *base

  # t -> も
  - type: basic
    from:
      key_code: t
      modifiers: *optional_shift
    to:
    - key_code: m
    - key_code: o
      repeat: false
    conditions: *base

  # y -> り
  - type: basic
    from:
      key_code: "y"
      modifiers: *optional_shift
    to:
    - key_code: r
    - key_code: i
      repeat: false
    conditions: *base

  # u -> っ
  - type: basic
    from:
      key_code: u
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: t
    - key_code: u
      repeat: false
    conditions: *base

  # i -> し
  - type: basic
    from:
      key_code: i
      modifiers: *optional_shift
    to:
    - key_code: s
    - key_code: i
      repeat: false
    conditions: *base

  # o -> の
  - type: basic
    from:
      key_code: o
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: o
      repeat: false
    conditions: *base

  # p -> き
  - type: basic
    from:
      key_code: p
      modifiers: *optional_shift
    to:
    - key_code: k
    - key_code: i
      repeat: false
    conditions: *base

  # a -> で
  - type: basic
    from:
      key_code: a
      modifiers: *optional_shift
    to:
    - key_code: d
    - key_code: e
      repeat: false
    conditions: *base

  # s -> か
  - type: basic
    from:
      key_code: s
      modifiers: *optional_shift
    to:
    - key_code: k
    - key_code: a
      repeat: false
    conditions: *base

  # d (中指シフトキーで定義)

  # f -> な
  - type: basic
    from:
      key_code: f
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: a
      repeat: false
    conditions: *base

  # g -> た
  - type: basic
    from:
      key_code: g
      modifiers: *optional_shift
    to:
    - key_code: t
    - key_code: a
      repeat: false
    conditions: *base

  # h -> く
  - type: basic
    from:
      key_code: h
      modifiers: *optional_shift
    to:
    - key_code: k
    - key_code: u
      repeat: false
    conditions: *base

  # j -> ん
  - type: basic
    from:
      key_code: j
      modifiers: *optional_shift
    to:
    - key_code: "n"
    - key_code: "n"
      repeat: false
    conditions: *base

  # k (中指シフトキーで定義)

  # l -> い
  - type: basic
    from:
      key_code: l
      modifiers: *optional_shift
    to:
    - key_code: i
      repeat: false
    conditions: *base

  # ; -> と
  - type: basic
    from:
      key_code: semicolon
      modifiers: *optional_shift
    to:
    - key_code: t
    - key_code: o
      repeat: false
    conditions: *base

  # ' -> ー
  - type: basic
    from:
      key_code: quote
      modifiers: *optional_shift
    to:
    - key_code: quote
      repeat: false
    conditions: *base

  # z -> だ
  - type: basic
    from:
      key_code: z
      modifiers: *optional_shift
    to:
    - key_code: d
    - key_code: a
      repeat: false
    conditions: *base

  # x -> が
  - type: basic
    from:
      key_code: x
      modifiers: *optional_shift
    to:
    - key_code: g
    - key_code: a
      repeat: false
    conditions: *base

  # c -> ま
  - type: basic
    from:
      key_code: c
      modifiers: *optional_shift
    to:
    - key_code: m
    - key_code: a
      repeat: false
    conditions: *base

  # v -> す
  - type: basic
    from:
      key_code: v
      modifiers: *optional_shift
    to:
    - key_code: s
    - key_code: u
      repeat: false
    conditions: *base

  # b -> ょ
  - type: basic
    from:
      key_code: b
      modifiers: *optional_shift
    to:
    - key_code: x
    - key_code: "y"
    - key_code: o
      repeat: false
    conditions: *base

  # n -> る
  - type: basic
    from:
      key_code: "n"
      modifiers: *optional_shift
    to:
    - key_code: r
    - key_code: u
      repeat: false
    conditions: *base

  # m -> う
  - type: basic
    from:
      key_code: m
      modifiers: *optional_shift
    to:
    - key_code: u
      repeat: false
    conditions: *base

  # , -> れ
  - type: basic
    from:
      key_code: comma
      modifiers: *optional_shift
    to:
    - key_code: r
    - key_code: e
      repeat: false
    conditions: *base

  # . -> ら
  - type: basic
    from:
      key_code: period
      modifiers: *optional_shift
    to:
    - key_code: r
    - key_code: a
      repeat: false
    conditions: *base

  # / -> 。
  - type: basic
    from:
      key_code: slash
      modifiers: *optional_shift
    to:
    - key_code: period
      repeat: false
    conditions: *base

# Symbol Mode ------------------------------------

  # Symbol Mode Key ------------------------------

  # r -> ぷ (左シフト時)
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift
    to_if_alone:
    - key_code: p
    - key_code: u
      repeat: false
    to:
    - set_variable:
        name: symbol
        value: true
        key_up_value: false
    conditions: *left_shift

  # r -> そ (右シフト時)
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift
    to_if_alone:
    - key_code: s
    - key_code: o
      repeat: false
    to:
    - set_variable:
        name: symbol
        value: true
        key_up_value: false
    conditions: *right_shift

  # r -> て (ベース時)
  - type: basic
    from:
      key_code: r
      modifiers: *optional_shift
    to_if_alone:
    - key_code: t
    - key_code: e
      repeat: false
    to:
    - set_variable:
        name: symbol
        value: true
        key_up_value: false
    conditions: *base

  # 中指シフトキー ---------------------------------

  # 中指シフトキーは Symbol Mode Key の後で定義する
  #
  # Symbol Mode Key の前で定義した場合、
  # Symbol Mode Key が担当する文字が正しく入力されなくなる
  # シフト時であってもベース時の文字が入力されてしまう
  #
  # おそらく Symbol Mode Key での文字入力前に、
  # 中指シフトキーの to_if_canceled が発火して、
  # シフトがキャンセルされているためと思われる

  # 左中指シフトキー
  - type: basic
    from:
      key_code: d
      modifiers: *optional_shift
    to:
    - set_variable:
        name: left_shift
        value: true
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: left_shift
          value: false
      to_if_canceled:
      - set_variable:
          name: left_shift
          value: false
    parameters: *delay_ms_to_cancel_shifted
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_unless
      name: symbol
      value: true
    - type: variable_unless
      name: right_shift
      value: true
    - type: frontmost_application_unless
      bundle_identifiers:
      - "com.apple.loginwindow"

  # 右中指シフトキー
  - type: basic
    from:
      key_code: k
      modifiers: *optional_shift
    to:
    - set_variable:
        name: right_shift
        value: true
    to_delayed_action:
      to_if_invoked:
      - set_variable:
          name: right_shift
          value: false
      to_if_canceled:
      - set_variable:
          name: right_shift
          value: false
    parameters: *delay_ms_to_cancel_shifted
    conditions:
    - type: input_source_if
      input_sources:
      - language: ja
    - type: variable_unless
      name: symbol
      value: true
    - type: variable_unless
      name: left_shift
      value: true
    - type: frontmost_application_unless
      bundle_identifiers:
      - "com.apple.loginwindow"

  # Symbol Mode Mapping --------------------------

  # 入力される記号はIMEの仮名テーブルで定義する

  # y
  - type: basic
    from:
      key_code: "y"
    to:
    - key_code: backslash
    - key_code: "y"
      repeat: false
    conditions: *symbol

  # u
  - type: basic
    from:
      key_code: u
    to:
    - key_code: backslash
    - key_code: u
      repeat: false
    conditions: *symbol

  # i
  - type: basic
    from:
      key_code: i
    to:
    - key_code: backslash
    - key_code: i
      repeat: false
    conditions: *symbol

  # o
  - type: basic
    from:
      key_code: o
    to:
    - key_code: backslash
    - key_code: o
      repeat: false
    conditions: *symbol

  # p
  - type: basic
    from:
      key_code: p
    to:
    - key_code: backslash
    - key_code: p
      repeat: false
    conditions: *symbol

  # h
  - type: basic
    from:
      key_code: h
    to:
    - key_code: backslash
    - key_code: h
      repeat: false
    conditions: *symbol

  # j
  - type: basic
    from:
      key_code: j
    to:
    - key_code: backslash
    - key_code: j
      repeat: false
    conditions: *symbol

  # k
  - type: basic
    from:
      key_code: k
    to:
    - key_code: backslash
    - key_code: k
      repeat: false
    conditions: *symbol

  # l
  - type: basic
    from:
      key_code: l
    to:
    - key_code: backslash
    - key_code: l
      repeat: false
    conditions: *symbol

  # ;
  - type: basic
    from:
      key_code: semicolon
    to:
    - key_code: backslash
    - key_code: semicolon
      repeat: false
    conditions: *symbol

  # :
  - type: basic
    from:
      key_code: semicolon
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: semicolon
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # '
  - type: basic
    from:
      key_code: quote
    to:
    - key_code: backslash
    - key_code: quote
      repeat: false
    conditions: *symbol

  # "
  - type: basic
    from:
      key_code: quote
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: quote
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # n
  - type: basic
    from:
      key_code: "n"
    to:
    - key_code: backslash
    - key_code: "n"
      repeat: false
    conditions: *symbol

  # m
  - type: basic
    from:
      key_code: m
    to:
    - key_code: backslash
    - key_code: m
      repeat: false
    conditions: *symbol

  # ,
  - type: basic
    from:
      key_code: comma
    to:
    - key_code: backslash
    - key_code: comma
      repeat: false
    conditions: *symbol

  # .
  - type: basic
    from:
      key_code: period
    to:
    - key_code: backslash
    - key_code: period
      repeat: false
    conditions: *symbol

  # <
  - type: basic
    from:
      key_code: comma
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: comma
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # >
  - type: basic
    from:
      key_code: period
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: period
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # /
  - type: basic
    from:
      key_code: slash
    to:
    - key_code: backslash
    - key_code: slash
      repeat: false
    conditions: *symbol

  # ?
  - type: basic
    from:
      key_code: slash
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: slash
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # [
  - type: basic
    from:
      key_code: open_bracket
    to:
    - key_code: backslash
    - key_code: open_bracket
      repeat: false
    conditions: *symbol

  # ]
  - type: basic
    from:
      key_code: close_bracket
    to:
    - key_code: backslash
    - key_code: close_bracket
      repeat: false
    conditions: *symbol

  # {
  - type: basic
    from:
      key_code: open_bracket
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: open_bracket
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # }
  - type: basic
    from:
      key_code: close_bracket
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: close_bracket
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # (
  - type: basic
    from:
      key_code: "9"
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: "9"
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # )
  - type: basic
    from:
      key_code: "0"
      modifiers: *mandatory_shift
    to:
    - key_code: backslash
    - key_code: "0"
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # 9 (alternative for '(')
  - type: basic
    from:
      key_code: "9"
    to:
    - key_code: backslash
    - key_code: "9"
      modifiers: *to_shift
      repeat: false
    conditions: *symbol

  # 0 (alternative for ')')
  - type: basic
    from:
      key_code: "0"
    to:
    - key_code: backslash
    - key_code: "0"
      modifiers: *to_shift
      repeat: false
    conditions: *symbol
